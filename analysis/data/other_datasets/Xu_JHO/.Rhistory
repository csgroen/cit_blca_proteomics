#     PercentageFeatureSet("^RP[SL]", col.name = "percent_ribo")
# cells_keep <- WhichCells(crc_train, expression = nFeature_RNA > 150 & percent_mito < 20 & percent_ribo > 5 & nCount_RNA > 5e3 & nCount_RNA < 6e4)
# feats_keep <- rownames(crc_train)[rowSums(crc_train@assays$RNA@counts) >= 10] |>
#     str_subset("^MT-|MALAT", negate = TRUE)
# crc_train <- crc_train[feats_keep, cells_keep]
# crc_train <- crc_train[,WhichCells(crc_train, expression = clTopLevel != "Mast")]
# gc()
# save(crc_train, file = "results/crc_full/crc_train_pp.RData")
# load("~/Documents/IMMUcan/results/crc_full/crc_train_pp.RData")
# ## hscreference: Create reference profiles --------------------------
# table(crc_train$clMidwayPr) %>% sort()
# crc_train <- crc_train[,!crc_train$clMidwayPr %in% c("Schwann", "ILC", "SmoothMuscle")]
#
# table(crc_train$clTopLevel) %>% sort()
#
# crc_ref <- new_hscreference(crc_train,
#                          project_name = "crc_htest",
#                          annot_ids = c("clTopLevel", "clMidwayPr"),
#                          batch_id = "PatientTypeID",
#                          sample_cells = c("Epi" = 10e3),
#                          seed = 0)
#
# rm(crc_train); gc()
# crc_ref <- crc_ref |>
#     compute_reference(method = "dwls")
# dir.create("~/Documents/IMMUcan/results/crc_htest/", showWarnings = FALSE, recursive = TRUE)
# save(crc_ref, file = "~/Documents/IMMUcan/results/crc_htest/crc_htest_scref.RData")
# gc()
load("~/Documents/IMMUcan/results/crc_htest/crc_htest_scref.RData")
# Test using full example ----------------------------------------
# Filter test ------------------------------
# test <- c("C104_T", "C107_T", "C110_T", "C112_T", "C114_T", "C116_T",
#           "C118_T", "C122_T", "C124_T", "C126_T", "C132_T", "C134_T", "C136_T",
#           "C138_T", "C140_T", "C143_T", "C145_T", "C147_T", "C150_T", "C152_T",
#           "C154_T", "C157_T", "C158_T", "C160_T", "C163_T", "C165_T", "C166_T",
#           "C168_T", "C172_T")
# crc_test <- get_crc_subset(pids = test, version = "test_v4")
# gc()
# crc_test <- crc_test |>
#     PercentageFeatureSet("^MT-", col.name = "percent_mito") |>
#     PercentageFeatureSet("^RP[SL]", col.name = "percent_ribo")
# cells_keep <- WhichCells(crc_test, expression = nFeature_RNA > 150 & percent_mito < 20 & percent_ribo > 5 & nCount_RNA > 5e3 & nCount_RNA < 6e4)
# feats_keep <- rownames(crc_test)[rowSums(crc_test@assays$RNA@counts) >= 10] |>
#     str_subset("^MT-|MALAT", negate = TRUE)
# crc_test <- crc_test[feats_keep, cells_keep]
#
# l1_keep <- unique(crc_ref$hpop_table$l1)
# l2_keep <- unique(crc_ref$hpop_table$l2)
#
# crc_test <- crc_test[,WhichCells(crc_tesmodelt, expression = clTopLevel %in% l1_keep & clMidwayPr %in% l2_keep)]
# gc()
# save(crc_test, file = "results/crc_full/crc_test_pp.RData")
load("~/Documents/IMMUcan/results/crc_full/crc_test_pp.RData")
# scbench -----------------
crc_bounds <- list(
l1 = data.frame(
population = c("Epi", "TNKILC", "Myeloid", "B", "Strom", "Plasma"),
lower = c(0.3, 0.05, 0.05, 0.01, 0.1, 0.01),
upper = c(0.7, 0.15, 0.15, 0.1, 0.5, 0.08)
),
l2_Myeloid = data.frame(
population = c("DC", "Macro", "Mono"),
lower = c(0.1, 0.2, 0.2),
upper = c(0.3, 0.8, 0.7)
),
l2_Strom = data.frame(
population = c("Endo", "Fibro", "Peri"),
lower = c(0.2, 0.4, 0.05),
upper = c(0.6, 0.7, 0.2)
),
l2_TNKILC = data.frame(
population = c("NK", "TCD4", "TCD8", "Tgd", "TZBTB16"),
lower = c(0.1, 0.2, 0.2, 0.05, 0.05),
upper = c(0.3, 0.5, 0.5, 0.15, 0.15)
)
)
crc_bench <-
new_scbench(crc_test, crc_bounds,
annot_ids = c("clTopLevel", "clMidwayPr"),
project_name = "crc_htest",
batch_id = "PatientTypeID",
cache_path = "~/Documents/IMMUcan/scbench_cache/") %>%
mixtures_population(nsamps = 500, seed = 0) %>%
mixtures_spillover() %>%
mixtures_lod()
rm(crc_test); gc()
crc_ref <- compute_reference(crc_ref, method = "autogenes")
library(deconverse)
# library(testit)
# library(pbmcapply)
# library(fastDummies)
# library(hitandrun)
# library(R.utils)
source("~/Documents/IMMUcan/functions/data_ColonAtlas.R")
# # Generate training reference ------
# dir.create("results/crc_full/", showWarnings = FALSE)
# train <- c("C103_T", "C105_T", "C106_T", "C109_T", "C111_T", "C113_T",
#            "C115_T", "C119_T", "C123_T", "C125_T", "C129_T", "C133_T", "C135_T",
#            "C137_T", "C139_T", "C142_T", "C144_T", "C146_T", "C149_T", "C151_T",
#            "C153_T", "C155_T", "C156_T", "C159_T", "C161_T", "C162_T", "C164_T",
#            "C167_T", "C169_T", "C170_T", "C173_T")
# # Filter training reference -------------
# crc_train <- get_crc_subset(pids = train, version = "train_v4")
# gc()
# crc_train <- crc_train |>
#     PercentageFeatureSet("^MT-", col.name = "percent_mito") |>
#     PercentageFeatureSet("^RP[SL]", col.name = "percent_ribo")
# cells_keep <- WhichCells(crc_train, expression = nFeature_RNA > 150 & percent_mito < 20 & percent_ribo > 5 & nCount_RNA > 5e3 & nCount_RNA < 6e4)
# feats_keep <- rownames(crc_train)[rowSums(crc_train@assays$RNA@counts) >= 10] |>
#     str_subset("^MT-|MALAT", negate = TRUE)
# crc_train <- crc_train[feats_keep, cells_keep]
# crc_train <- crc_train[,WhichCells(crc_train, expression = clTopLevel != "Mast")]
# gc()
# save(crc_train, file = "results/crc_full/crc_train_pp.RData")
# load("~/Documents/IMMUcan/results/crc_full/crc_train_pp.RData")
# ## hscreference: Create reference profiles --------------------------
# table(crc_train$clMidwayPr) %>% sort()
# crc_train <- crc_train[,!crc_train$clMidwayPr %in% c("Schwann", "ILC", "SmoothMuscle")]
#
# table(crc_train$clTopLevel) %>% sort()
#
# crc_ref <- new_hscreference(crc_train,
#                          project_name = "crc_htest",
#                          annot_ids = c("clTopLevel", "clMidwayPr"),
#                          batch_id = "PatientTypeID",
#                          sample_cells = c("Epi" = 10e3),
#                          seed = 0)
#
# rm(crc_train); gc()
# crc_ref <- crc_ref |>
#     compute_reference(method = "dwls")
# dir.create("~/Documents/IMMUcan/results/crc_htest/", showWarnings = FALSE, recursive = TRUE)
# save(crc_ref, file = "~/Documents/IMMUcan/results/crc_htest/crc_htest_scref.RData")
# gc()
load("~/Documents/IMMUcan/results/crc_htest/crc_htest_scref.RData")
# Test using full example ----------------------------------------
# Filter test ------------------------------
# test <- c("C104_T", "C107_T", "C110_T", "C112_T", "C114_T", "C116_T",
#           "C118_T", "C122_T", "C124_T", "C126_T", "C132_T", "C134_T", "C136_T",
#           "C138_T", "C140_T", "C143_T", "C145_T", "C147_T", "C150_T", "C152_T",
#           "C154_T", "C157_T", "C158_T", "C160_T", "C163_T", "C165_T", "C166_T",
#           "C168_T", "C172_T")
# crc_test <- get_crc_subset(pids = test, version = "test_v4")
# gc()
# crc_test <- crc_test |>
#     PercentageFeatureSet("^MT-", col.name = "percent_mito") |>
#     PercentageFeatureSet("^RP[SL]", col.name = "percent_ribo")
# cells_keep <- WhichCells(crc_test, expression = nFeature_RNA > 150 & percent_mito < 20 & percent_ribo > 5 & nCount_RNA > 5e3 & nCount_RNA < 6e4)
# feats_keep <- rownames(crc_test)[rowSums(crc_test@assays$RNA@counts) >= 10] |>
#     str_subset("^MT-|MALAT", negate = TRUE)
# crc_test <- crc_test[feats_keep, cells_keep]
#
# l1_keep <- unique(crc_ref$hpop_table$l1)
# l2_keep <- unique(crc_ref$hpop_table$l2)
#
# crc_test <- crc_test[,WhichCells(crc_tesmodelt, expression = clTopLevel %in% l1_keep & clMidwayPr %in% l2_keep)]
# gc()
# save(crc_test, file = "results/crc_full/crc_test_pp.RData")
load("~/Documents/IMMUcan/results/crc_full/crc_test_pp.RData")
# scbench -----------------
crc_bounds <- list(
l1 = data.frame(
population = c("Epi", "TNKILC", "Myeloid", "B", "Strom", "Plasma"),
lower = c(0.3, 0.05, 0.05, 0.01, 0.1, 0.01),
upper = c(0.7, 0.15, 0.15, 0.1, 0.5, 0.08)
),
l2_Myeloid = data.frame(
population = c("DC", "Macro", "Mono"),
lower = c(0.1, 0.2, 0.2),
upper = c(0.3, 0.8, 0.7)
),
l2_Strom = data.frame(
population = c("Endo", "Fibro", "Peri"),
lower = c(0.2, 0.4, 0.05),
upper = c(0.6, 0.7, 0.2)
),
l2_TNKILC = data.frame(
population = c("NK", "TCD4", "TCD8", "Tgd", "TZBTB16"),
lower = c(0.1, 0.2, 0.2, 0.05, 0.05),
upper = c(0.3, 0.5, 0.5, 0.15, 0.15)
)
)
crc_bench <-
new_scbench(crc_test, crc_bounds,
annot_ids = c("clTopLevel", "clMidwayPr"),
project_name = "crc_htest",
batch_id = "PatientTypeID",
cache_path = "~/Documents/IMMUcan/scbench_cache/") %>%
mixtures_population(nsamps = 500, seed = 0) %>%
mixtures_spillover() %>%
mixtures_lod()
rm(crc_test); gc()
crc_ref <- compute_reference(crc_ref, method = "autogenes")
crc_bench2 <- pseudobulks(crc_bench, ncells = 500, seed = 0, ncores = 8, by_batch = FALSE) %>%
deconvolute_all(crc_ref, methods = c("dwls", "ols", "svr", "autogenes"))
plt_population_mixtures(crc_bench2)
plt_cors_scatter(crc_bench2, method = "autogenes")
plt_cor_heatmap(crc_bench2)
plt_rmse_heatmap(crc_bench2)
plt_spillover_scatter(crc_bench2, "autogenes")
plt_spillover_heatmap(crc_bench2)
plt_lod_scatter(crc_bench2, method = "autogenes")
plt_lod_heatmap(crc_bench2, "l1")
plt_cors_scatter(crc_bench2, method = "autogenes")
plt_cor_heatmap(crc_bench2)
plt_rmse_heatmap(crc_bench2)
plt_spillover_scatter(crc_bench2, "autogenes")
plt_spillover_heatmap(crc_bench2)
plt_lod_scatter(crc_bench2, method = "autogenes")
plt_lod_heatmap(crc_bench2, "l1")
plt_lod_scatter(crc_bench2, method = "autogenes")
debugSource("~/Documents/Packages/deconverse/R/scbench.R")
################################################################################
## Test
################################################################################
read_tsv("~/Downloads/prost_test_out//star_salmon/featurecounts/ODG_001_S1.featureCounts.txt")
################################################################################
## Test
################################################################################
library(tidyverse)
read_tsv("~/Downloads/prost_test_out//star_salmon/featurecounts/ODG_001_S1.featureCounts.txt")
read_csv2("~/Downloads/prost_test_out//star_salmon/featurecounts/ODG_001_S1.featureCounts.txt")
library(Seurat)
library(deconverse)
library(patchwork)
data(pbmc)
pbmc
(DimPlot(pbmc, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc, group.by = "Cell_minor_identities", reduction = "umap", label = TRUE) + NoLegend())
set.seed(0)
ncells <- dim(pbmc)[2]
train_ids <- sample(1:ncells, ncells*0.6)
test_ids <- setdiff(1:ncells, train_ids)
pbmc_train <- pbmc[,train_ids]
pbmc_test <- pbmc[,test_ids]
set.seed(0)
ncells <- dim(pbmc)[2]
train_ids <- sample(1:ncells, ncells*0.6)
test_ids <- setdiff(1:ncells, train_ids)
pbmc_train <- pbmc[,train_ids]
pbmc_test <- pbmc[,test_ids]
(DimPlot(pbmc_train, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc_test, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend())
pbmc_ref <- new_hscreference(pbmc_train,
annot_ids = c("Cell_major_identities", "Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident") |>
compute_reference("dwls") |>
compute_reference("bayesprism") |>
compute_reference("autogenes")
pbmc_ref
table(pbmc_test$Cell_major_identities, pbmc_test$Cell_minor_identities)
pbmc_bounds <- list(
l1 = data.frame(
population = c("B", "Monocytic_lineage", "TNK"),
lower = c(0.2, 0.2, 0.2),
upper = c(0.8, 0.8, 0.8)
),
l2_TNK = data.frame(
population = c("CD8 T", "Memory CD4 T", "Naive CD4 T", "NK"),
lower = c(0.2, 0.2, 0.2, 0.1),
upper = c(0.5, 0.5, 0.5, 0.3)
),
l2_Monocytic_lineage = data.frame(
population = c("CD14+ Mono", "FCGR3A+ Mono", "DC"),
lower = c(0.3, 0.2, 0),
upper = c(0.8, 0.6, 0.2)
)
)
pbmc_bench <- new_scbench(pbmc_test, pop_bounds = pbmc_bounds,
annot_ids = c("Cell_major_identities",
"Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident")
pbmc_bench
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
debugSource("~/Documents/Packages/deconverse/R/scbench.R")
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
library(testit)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
library(fastDummies)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
library(hitandrun)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
library(R.utils)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
#-- Error handling
assert(class(scbench) == "scbench")
assert(class(scref) %in% c("screference", "hscreference"))
assert(all(methods %in% deconvolution_methods()))
#-- Get types
types <- names(scbench$pseudobulk_counts)
type
#-- Get types
types <- names(scbench$pseudobulk_counts)
types
type = "population"
message("========= Deconvoluting pseudobulks for ", type, " analysis ==========")
for(method in methods) {
if(method == "cibersortx") {
scbench <- deconvolute(scbench, scref, method = method, type = type, ...)
} else {
scbench <- deconvolute(scbench, scref, method = method, type = type)
}
}
library(Seurat)
library(deconverse)
library(patchwork)
data(pbmc)
pbmc
(DimPlot(pbmc, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc, group.by = "Cell_minor_identities", reduction = "umap", label = TRUE) + NoLegend())
set.seed(0)
ncells <- dim(pbmc)[2]
train_ids <- sample(1:ncells, ncells*0.6)
test_ids <- setdiff(1:ncells, train_ids)
pbmc_train <- pbmc[,train_ids]
pbmc_test <- pbmc[,test_ids]
(DimPlot(pbmc_train, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc_test, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend())
pbmc_ref <- new_hscreference(pbmc_train,
annot_ids = c("Cell_major_identities", "Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident") |>
compute_reference("dwls") |>
compute_reference("bayesprism") |>
compute_reference("autogenes")
pbmc_ref
table(pbmc_test$Cell_major_identities, pbmc_test$Cell_minor_identities)
pbmc_bounds <- list(
l1 = data.frame(
population = c("B", "Monocytic_lineage", "TNK"),
lower = c(0.2, 0.2, 0.2),
upper = c(0.8, 0.8, 0.8)
),
l2_TNK = data.frame(
population = c("CD8 T", "Memory CD4 T", "Naive CD4 T", "NK"),
lower = c(0.2, 0.2, 0.2, 0.1),
upper = c(0.5, 0.5, 0.5, 0.3)
),
l2_Monocytic_lineage = data.frame(
population = c("CD14+ Mono", "FCGR3A+ Mono", "DC"),
lower = c(0.3, 0.2, 0),
upper = c(0.8, 0.6, 0.2)
)
)
pbmc_bench <- new_scbench(pbmc_test, pop_bounds = pbmc_bounds,
annot_ids = c("Cell_major_identities",
"Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident")
pbmc_bench
debugSource("~/Documents/Packages/deconverse/R/scbench.R")
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
library(testit)
library(hitandrun)
library(R.utils)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
library(fastDummies)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
debugSource("~/Documents/Packages/deconverse/R/dwls.R")
source("~/Documents/Packages/deconverse/R/scbench.R")
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
library(pbmcapply)
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
props
quadprog::solve.QP()
quadprog::solve.QP
library(quadprog)
debugSource("~/Documents/Packages/deconverse/R/dwls.R")
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
props
B_list
bind_rows(props)
props
names(B_list)
data4dwls
sc_sigs
scref$cached_results$dwls
dim(sc_sigs)
source("~/Documents/Packages/deconverse/R/dwls.R")
source("~/Documents/Packages/deconverse/R/dwls.R")
load("~/Documents/Packages/deconverse/scref_cache/pbmc_example_l1/dwls/Sig.RData")
View(Sig)
reference_res <- readRDS("~/Documents/Packages/deconverse/scref_cache/pbmc_example_l1/dwls/reference_res.RDS")
reference_res
dim(reference_res)
reference_res[1:5,1:5]
reference_res[1:5,]
debugSource("~/Documents/Packages/deconverse/R/dwls.R")
source("~/Documents/Packages/deconverse/R/dwls.R")
library(Seurat)
library(deconverse)
library(patchwork)
data(pbmc)
pbmc
(DimPlot(pbmc, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc, group.by = "Cell_minor_identities", reduction = "umap", label = TRUE) + NoLegend())
set.seed(0)
ncells <- dim(pbmc)[2]
train_ids <- sample(1:ncells, ncells*0.6)
test_ids <- setdiff(1:ncells, train_ids)
pbmc_train <- pbmc[,train_ids]
pbmc_test <- pbmc[,test_ids]
(DimPlot(pbmc_train, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend()) | (DimPlot(pbmc_test, reduction = "umap", group.by = "Cell_major_identities", label = TRUE) + NoLegend())
pbmc_ref <- new_hscreference(pbmc_train,
annot_ids = c("Cell_major_identities", "Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident") |>
compute_reference("dwls") |>
compute_reference("bayesprism") |>
compute_reference("autogenes")
pbmc_ref
table(pbmc_test$Cell_major_identities, pbmc_test$Cell_minor_identities)
pbmc_bounds <- list(
l1 = data.frame(
population = c("B", "Monocytic_lineage", "TNK"),
lower = c(0.2, 0.2, 0.2),
upper = c(0.8, 0.8, 0.8)
),
l2_TNK = data.frame(
population = c("CD8 T", "Memory CD4 T", "Naive CD4 T", "NK"),
lower = c(0.2, 0.2, 0.2, 0.1),
upper = c(0.5, 0.5, 0.5, 0.3)
),
l2_Monocytic_lineage = data.frame(
population = c("CD14+ Mono", "FCGR3A+ Mono", "DC"),
lower = c(0.3, 0.2, 0),
upper = c(0.8, 0.6, 0.2)
)
)
pbmc_bench <- new_scbench(pbmc_test, pop_bounds = pbmc_bounds,
annot_ids = c("Cell_major_identities",
"Cell_minor_identities"),
project_name = "pbmc_example",
batch_id = "orig.ident")
pbmc_bench
pbmc_bench <- pbmc_bench |>
mixtures_population(nsamp = 500) |>
mixtures_lod() |>
mixtures_spillover()
pbmc_bench |>
pseudobulks(ncells = 100) |>
deconvolute_all(pbmc_ref, methods = c("dwls", "svr", "ols", "bayesprism",
"autogenes", "bisque", "music"))
setwd("~/Desktop/Proteomics_paper")
setwd("~/Desktop/Proteomics_paper/CITproteomics")
# install.packages(c("targets"))
# see: https://books.ropensci.org/targets/
library(targets)
setwd("~/Desktop/Proteomics_paper/CITproteomics")
R.utils::sourceDirectory("functions", modifiedOnly = FALSE)
setwd("~/Desktop/Proteomics_paper/CITproteomics/data/other_datasets/Xu_JHO")
