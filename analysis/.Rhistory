# install.packages(c("targets"))
# see: https://books.ropensci.org/targets/
library(targets)
setwd("~/Desktop/CITproteomics")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
nps_train <- .nps_train()
# install.packages(c("targets"))
# see: https://books.ropensci.org/targets/
library(targets)
# setwd("~/Desktop/CITproteomics")
R.utils::sourceDirectory("functions", modifiedOnly = FALSE)
nps_train <- .nps_train()
nps_train
#-- Read protein expression data
str_prot <- .pp_strog_prot()
str_prot_exp <-
read_excel("data/other_datasets/Stroggilos_IJC/ijc32556-sup-0001-appendixs1.xlsx", sheet = 2, skip = 6) %>%
select(protein_id = Accession, symbol = `Gene name`, starts_with("Sample"))
str_prot_exp
str_prot_exp <-
read_excel("data/other_datasets/Stroggilos_IJC/ijc32556-sup-0001-appendixs1.xlsx", sheet = 2, skip = 6) %>%
select(protein_id = Accession, symbol = `Gene name`, starts_with("Sample"))
str_prot_counts <- str_prot_exp %>%
select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
group_by(symbol) %>%
slice_max(mean_counts) %>%
ungroup() %>%
select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol") %>%
as.matrix()
str_prot_exp
tar_make()
tar_make()
str_prot_exp <-
read_excel("data/other_datasets/Stroggilos_IJC/ijc32556-sup-0001-appendixs1.xlsx", sheet = 2, skip = 6) %>%
select(protein_id = Accession, symbol = `Gene name`, starts_with("Sample"))
str_prot_counts <- str_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol") %>%
as.matrix()
str_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame()
tr_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol")
str_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol")
str_prot_counts <- str_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts, n = 1) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol") %>%
as.matrix()
str_prot_counts <- str_prot_exp %>%
dplyr::select(symbol, starts_with("Sample")) %>%
mutate(mean_counts = rowMeans(select(., starts_with("Sample")))) %>%
dplyr::group_by(symbol) %>%
slice_max(mean_counts) %>%
slice(n=1) %>%
ungroup() %>%
dplyr::select(-mean_counts) %>%
as.data.frame() %>%
column_to_rownames("symbol") %>%
as.matrix()
? slice
tar_make()
tar_make()
library(needs)
needs::prioritize("dplyr")
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
# install.packages(c("targets"))
# see: https://books.ropensci.org/targets/
library(targets)
# setwd("~/Desktop/CITproteomics")
R.utils::sourceDirectory("functions", modifiedOnly = FALSE)
tar_read(plt_cna_example)
tar_read(apop_genes_sifgfr3)
discrete_range <- function(old, new, drop = FALSE, na.rm = FALSE) {
new <- clevels(new, drop = drop, na.rm = na.rm)
if (is.null(old)) {
return(new)
}
if (!is.character(old)) old <- clevels(old, na.rm = na.rm)
new_levels <- setdiff(new, as.character(old))
# Keep as a factor if we don't have any new levels
if (length(new_levels) == 0) {
return(old)
}
sort(c(old, new_levels))
}
tar_read(apop_genes_sifgfr3)
clevels <- function(x, drop = FALSE, na.rm = FALSE) {
if (is.null(x)) {
character()
} else if (is.factor(x)) {
if (drop) x <- factor(x)
values <- levels(x)
if (na.rm) {
values <- values[!is.na(values)]
} else if (any(is.na(x))) {
values <- c(values, NA)
}
values
} else {
sort(unique(x), na.last = if (na.rm) NA else TRUE)
}
}
tar_read(apop_genes_sifgfr3)
